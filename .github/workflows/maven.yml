# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI-Maven-BCacheServer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "bDev", "url": "https://developer.dev404.net/maven" }]'
      - name: Build with Maven
        run: mvn -B package --file java/pom.xml
      - name: CreateRelease
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, do not need to create;
        with:
          tag_name: r0_6_4
          release_name: Release_0.6.4
          body: |
            Release - ${{ github.ref }}
            Beta Build.
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: java/bCacheServer/target/bCacheServer.zip
          asset_name: bCacheServer.zip
          asset_content_type: application/zip
